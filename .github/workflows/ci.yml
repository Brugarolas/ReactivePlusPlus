name: CI

on:
  push:
    branches:
    - main
    - v2_1

  pull_request:
    branches:
    - main

jobs:
  coverage:
    name: Test Coverage

    timeout-minutes: 10
    runs-on: ubuntu-latest
    if: github.repository_owner == 'victimsnino'

    steps:
    - uses: actions/checkout@v3

    - name: Install gcovr
      run: sudo apt-get update -q && sudo apt-get install gcovr -q -y

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ci-coverage-gcc
        buildPreset: ci-build
        testPreset: ci-tests

    - name: Process coverage info
      run: cmake --build build -t coverage

    - name: Submit to codecov.io
      uses: codecov/codecov-action@v3
      with:
        file: build/coverage_report.xml

  sanitize:
    strategy:
      matrix:
        sanitizer: ["tsan", "asan", "lsan", "msan", "ubsan"]

    name: Sanitize - ${{ matrix.sanitizer }}
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v3

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ci-sanitize-${{ matrix.sanitizer }}
        buildPreset: ci-build
        testPreset: ci-sanitize

  tests:
    strategy:
      matrix:
        config: [{name: ci-ubuntu-gcc,  os: ubuntu-latest},
                {name: ci-ubuntu-clang,os: ubuntu-latest},
                {name: ci-windows,     os: windows-latest},
                {name: ci-macos,       os: macos-latest}]
        type: [tests]

    timeout-minutes: 20
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.type }} ${{ matrix.config.name }}

    steps:
    - uses: actions/checkout@v3
      with:
          fetch-depth: 0

    - name: Install deps
      if: matrix.config.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -q && sudo apt-get install clang-tidy cppcheck -y -q
        pip install pyyaml

    - name: Run CMake
      uses: lukka/run-cmake@v10
      with:
        configurePreset: ${{ matrix.config.name }}-${{ matrix.type }}
        buildPreset: ci-build
        testPreset: ci-tests

  sonarcloud:
    name: Sonarcloud
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
          
      - name:  Install sonar-scanner and build-wrapper
        uses: sonarsource/sonarcloud-github-c-cpp@v1
      
      - name: Run build-wrapper
        env:
          CC: gcc-10
          CXX: g++-10
        run: |
          mkdir build
          cmake -S . -B build -DRPP_BUILD_TESTS=1
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Release --parallel 2
      
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" #Consult https://docs.sonarcloud.io/advanced-setup/ci-based-analysis/sonarscanner-cli/ for more information and options
